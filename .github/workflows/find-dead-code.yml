name: Dead Code Detection
on:
  pull_request:
    types: [opened, labeled, unlabeled, synchronize]
    paths:
      - '**/*.swift'

jobs:
  dead-code-check:
    runs-on: macos-13
    permissions:
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Periphery
        run: brew install peripheryapp/periphery/periphery

      - name: Build project and run Periphery scan
        id: periphery-scan
        run: |

          # Run Periphery scan with the configuration file
          periphery scan --config .periphery.yml 2>&1 | sed -E 's#.*/##; s/:[0-9]+:[0-9]+:/: /' | grep 'is unused' | sort > periphery_report_feature_formatted_sorted.txt
          ruby ci_scripts/dead_code/process_periphery_output.rb periphery_report_feature_formatted_sorted.txt unused_code_feature.json

      - name: Copy .periphery.yml to temporary location
        run: |
            # Copy necessary files to /tmp/ before checking out master
            cp .periphery.yml /tmp/
            cp ci_scripts/dead_code/process_periphery_output.rb /tmp/

      - name: Compare Periphery output with master baseline
        run: |
          git fetch origin master:master
          git checkout master
          cp /tmp/.periphery.yml .periphery.yml
          mkdir -p ci_scripts/dead_code/
          cp /tmp/process_periphery_output.rb ci_scripts/dead_code/
          periphery scan --config .periphery.yml 2>&1 | sed -E 's#.*/##; s/:[0-9]+:[0-9]+:/: /' | grep 'is unused' | sort > periphery_report_master_formatted_sorted.txt
          ruby ci_scripts/dead_code/process_periphery_output.rb periphery_report_master_formatted_sorted.txt unused_code_master.json

      - name: Compare Unused Code JSON Files
        id: compare-dead-code
        run: |
          # Compare the keys in the JSON files to find new dead code
          ruby -r json -e '
            master_file = "unused_code_master.json"
            feature_file = "unused_code_feature.json"
            output_file = "new_dead_code.json"

            master_unused_code = JSON.parse(File.read(master_file))
            feature_unused_code = JSON.parse(File.read(feature_file))

            new_dead_code = feature_unused_code.reject { |k, _| master_unused_code.key?(k) }

            if new_dead_code.empty?
              puts "No new dead code detected."
            else
              File.write(output_file, JSON.pretty_generate(new_dead_code) + "\n")
            end
          '

          # Check if new_dead_code.json exists and is not empty
          if [ -s new_dead_code.json ]; then
            # Extract values from the JSON and join them with newlines
            dead_code_messages=$(ruby -r json -e 'puts JSON.parse(File.read("new_dead_code.json")).values.join("\n")')
            # Escape special characters for GitHub Actions output
            escaped_messages=$(echo "$dead_code_messages" | sed 's/%/%25/g; s/\r/%0D/g; s/\n/%0A/g')
            echo "dead_code_messages=$escaped_messages" >> $GITHUB_OUTPUT
          else
            echo "No new dead code detected."
          fi

      - uses: peter-evans/find-comment@v3
        id: find_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: '🚨 New dead code detected'

      - uses: peter-evans/create-or-update-comment@v3
        id: create_update_comment
        if: steps.compare-dead-code.outputs.dead_code_messages != ''
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            🚨 New dead code detected in this PR:

            ```
            ${{ steps.compare-dead-code.outputs.dead_code_messages }}
            ```

            Please remove the dead code before merging.

            If this is intentional, you can bypass this check by adding the label `skip dead code check` to this PR.

            ℹ️ If this comment appears to be left in error, make sure your branch is up-to-date with `master`.

          edit-mode: replace
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fail if not acknowledged
        if: steps.compare-dead-code.outputs.dead_code_messages != '' && !contains(github.event.pull_request.labels.*.name, 'skip dead code check')
        run: exit 1
