//
// Project-Shared.xcconfig
//
// Generated by BuildSettingExtractor on 4/27/15
// https://github.com/dempseyatgithub/BuildSettingExtractor
//


// Always Search User Paths
// 
// If enabled both #include <header.h>-style and #include "header.h"-style directives
// will search the paths in "User Header Search Paths" before "Header Search Paths", with
// the consequence that user headers (such as your own String.h header) would have
// precedence over system headers when using #include <header.h>. This is done using the
// -iquote flag for the paths provided in "User Header Search Paths". If disabled and
// your compiler fully supports separate user paths, user headers will only be accessible
// with #include "header.h"-style preprocessor directives.
// 
// For backwards compatibility reasons, this setting is enabled by default, but disabling
// it is strongly recommended.

ALWAYS_SEARCH_USER_PATHS = NO


CLANG_ENABLE_CODE_COVERAGE = NO


CLANG_ENABLE_OBJC_ARC = YES


CLANG_WARN__DUPLICATE_METHOD_MATCH = YES


CLANG_WARN_BOOL_CONVERSION = YES


CLANG_WARN_CONSTANT_CONVERSION = YES


CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES


CLANG_WARN_EMPTY_BODY = YES


CLANG_WARN_ENUM_CONVERSION = YES


CLANG_WARN_INT_CONVERSION = YES


CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES


CLANG_WARN_SUSPICIOUS_IMPLICIT_CONVERSION = YES


CLANG_WARN_UNREACHABLE_CODE = YES


CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES;


CLANG_ANALYZER_NUMBER_OBJECT_CONVERSION = YES_AGGRESSIVE;

// Default value is YES_NONAGGRESSIVE. YES is "Yes, Aggressive" in Xcode 9 UI
CLANG_ANALYZER_NONNULL = YES;


CLANG_WARN_INFINITE_RECURSION = YES;


CLANG_WARN_SUSPICIOUS_MOVE = YES;


ENABLE_STRICT_OBJC_MSGSEND = YES


GCC_C_LANGUAGE_STANDARD = gnu99


CLANG_WARN_STRICT_PROTOTYPES = YES


CLANG_WARN_RANGE_LOOP_ANALYSIS = YES


CLANG_WARN_COMMA = YES


CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES


// Compiler for C/C++/Objective-C
// 
// The compiler to use for C, C++, and Objective-C.

GCC_VERSION = com.apple.compilers.llvm.clang.1_0


GCC_WARN_64_TO_32_BIT_CONVERSION = YES


GCC_WARN_ABOUT_MISSING_NEWLINE = YES


GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES


GCC_WARN_ABOUT_RETURN_TYPE = YES


GCC_WARN_SIGN_COMPARE = YES


GCC_WARN_UNDECLARED_SELECTOR = YES


GCC_WARN_UNINITIALIZED_AUTOS = YES


GCC_WARN_UNUSED_FUNCTION = YES


GCC_WARN_UNUSED_VARIABLE = YES


GCC_NO_COMMON_BLOCKS = YES;

// Precompiled Header Uses Files From Build Directory
// 
// This setting allows for better control of sharing precompiled prefix header files
// between projects. By default, Xcode assumes that the prefix header file may include
// header files from the build directory if the build directory is outside of the project
// directory. (Xcode cannot determine this ahead of time since other projects may not
// have been built into the shared build directory at the time the information is
// needed.)
// 
// If your prefix file never includes files from the build directory you may set this to
// "NO" to improve sharing of precompiled headers. If the prefix does use files from a
// build directory which is inside your project directory, you may set this to "YES" to
// avoid unintended sharing that may result in build failures.

PRECOMPS_INCLUDE_HEADERS_FROM_BUILT_PRODUCTS_DIR = NO


// Base SDK
// 
// The name or path of the base SDK being used during the build. The product will be
// built against the headers and libraries located inside the indicated SDK. This path
// will be prepended to all search paths, and will be passed through the environment to
// the compiler and linker. Additional SDKs can be specified in the ADDITIONAL_SDKS
// setting.

SDKROOT = iphoneos


WARNING_CFLAGS = -Wall -Wextra -Wundef -Wfloat-equal

// iOS Deployment Target
//
// Code will load on this and later versions of iOS.  Framework APIs that are unavailable
// in earlier versions will be weak-linked; your code should check for null function
// pointers or specific system versions before calling newer APIs.
//

IPHONEOS_DEPLOYMENT_TARGET = 10.0

